Since the interpreter uses applicative order, it tries to evaluate the
inner-most sqrt-iter in the process of evaluating the outermost, which
in turn results in the interpreter trying to evaluate another
"sqrt-iter", and this results in infinite recursion. 

Note that in clisp the error seems to be different: I get a floating
point underflow error. The reason is the same as above, even when we
have a good enough guess sqrt-iter keeps getting called recursively
because of the applicative order and eventually overflows the floating
point arithmetic.
